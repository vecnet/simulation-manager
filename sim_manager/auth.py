# This file is part of the Simulation Manager project for VecNet.
# For copyright and licensing information about this project, see the
# NOTICE.txt and LICENSE.md files in its top-level directory; they are
# available at https://github.com/vecnet/simulation-manager
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License (MPL), version 2.0. If a copy of the MPL was not distributed
# with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

from crc_nd.utils.errors import CallerError
from django.contrib.auth.models import User
from path import path

from sim_manager.models import get_api_key

SCRIPT_USER = 'cluster-script'  # The user that cluster scripts use for authentication
SECRETS_FILE = 'secrets.py'     # The file that credentials are stored in for script use

# Full path to the Python file (module) where the script user's credentials are saved for script use
_secrets_path = None


def get_secrets_path():
    """
    Return the path to the Python file where the script user's credentials are saved for script access.
    """
    global _secrets_path
    if _secrets_path is None:
        import inspect
        import sim_manager.scripts
        path_to_init_py = inspect.getabsfile(sim_manager.scripts)
        package_dir = path(path_to_init_py).dirname()
        _secrets_path = package_dir / SECRETS_FILE
    return _secrets_path


class Errors:
    MULTIPLE_USERS_EXIST = object()
    SCRIPT_USER_EXISTS = CallerError('Script user already exists')


def create_script_user():
    """
    Create the user that cluster scripts user for authentication.  The user credentials are written to a file (its
    name is the SECRETS_FILE constant) for use by the scripts.
    """
    assert not script_user_exists(), Errors.SCRIPT_USER_EXISTS

    #  No password is provided to the create_user method below, so set_unusable_password is called on the new user.
    #  The script user should only use its API key for authentication.
    script_user = User.objects.create_user(SCRIPT_USER)
    api_key = get_api_key(script_user)

    #  Write the credentials to a module for the scripts to import.
    with open(get_secrets_path(), 'w') as f:
        lines = (
            '# This file is automatically generated by the scriptuser management command.',
            '',
            'USERNAME = "%s"' % SCRIPT_USER,
            'API_KEY = "%s"' % api_key,
        )
        for line in lines:
            f.write(line + '\n')


def script_user_exists():
    """
    Has the script user been created?
    """
    script_users = User.objects.filter(username=SCRIPT_USER)
    assert script_users.count() <= 1, Errors.MULTIPLE_USERS_EXIST  # username is supposed to be UNIQUE
    return script_users.count() == 1


def delete_script_user():
    """
    Delete the script user if it's been created.  Also delete the file with the user's credentials.  If the user does
    not exist, then this function does nothing.
    """
    script_user = User.objects.filter(username=SCRIPT_USER)
    if script_user.exists():
        script_user.delete()
        secrets_module = get_secrets_path()
        secrets_pyc = secrets_module.stripext() + '.pyc'
        for file_path in (secrets_module, secrets_pyc):
            if file_path.exists():
                file_path.unlink()


class TestingApi:
    """
    API for testing purposes.
    """

    @classmethod
    def set_secrets_path(cls, new_path):
        """
        Set the path where the secrets should be stored.
        """
        global _secrets_path
        _secrets_path = new_path

    @classmethod
    def reset_secrets_path(cls):
        """
        Reset the path where the secrets are stored to the default path.
        """
        global _secrets_path
        _secrets_path = None